--- ../volatility3.ori/volatility3/framework/plugins/windows/dlllist.py	2021-09-21 07:14:11.679463996 +0000
+++ ../volatility3/volatility3/framework/plugins/windows/dlllist.py	2021-09-21 07:28:26.461063256 +0000
@@ -70,8 +70,11 @@
             if layer_name is None:
                 layer_name = dll_entry.vol.layer_name
 
-            file_handle = open_method("{}{}.{:#x}.{:#x}.dmp".format(prefix, ntpath.basename(name), dll_entry.vol.offset,
-                                                                    dll_entry.DllBase))
+            #file_handle = open_method("{}{}.{:#x}.{:#x}.dmp".format(prefix, ntpath.basename(name), dll_entry.vol.offset,
+            #                                                        dll_entry.DllBase))
+            file_handle = open_method("{}{}.{:#x}.{:#x}.dmp".format(prefix, ntpath.basename(name).encode("utf8","ignore").decode("ascii","ignore"),
+                                                                     dll_entry.vol.offset,
+                                                                     dll_entry.DllBase))
 
             dos_header = context.object(pe_table_name + constants.BANG + "_IMAGE_DOS_HEADER",
                                         offset = dll_entry.DllBase,
@@ -81,7 +84,8 @@
                 file_handle.seek(offset)
                 file_handle.write(data)
         except (IOError, exceptions.VolatilityException, OverflowError, ValueError) as excp:
-            vollog.debug(f"Unable to dump dll at offset {dll_entry.DllBase}: {excp}")
+            #vollog.debug(f"Unable to dump dll at offset {dll_entry.DllBase}: {excp}")
+            vollog.debug(f"Unable to dump dll at offset {excp}")
             return None
         return file_handle
 
@@ -146,12 +150,14 @@
                     size_of_image = format_hints.Hex(entry.SizeOfImage)
                 except exceptions.InvalidAddressException:
                     size_of_image = renderers.NotAvailableValue()
-
-                yield (0, (proc.UniqueProcessId,
+                try:
+                    yield (0, (proc.UniqueProcessId,
                            proc.ImageFileName.cast("string",
                                                    max_length = proc.ImageFileName.vol.count,
                                                    errors = 'replace'), dllbase, size_of_image, BaseDllName,
                            FullDllName, DllLoadTime, file_output))
+                except:
+                    continue
 
     def generate_timeline(self):
         kernel = self.context.modules[self.config['kernel']]
